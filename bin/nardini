#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# This script is an entry point that combines several functions from `nardini` into a
# stand-alone script that provides the ability to provide stand-alone analysis.
import os
import sys
import signal
from Bio import SeqIO
from io import StringIO
from datetime import datetime
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
from nardini.core import NUM_SCRAMBLED_SEQUENCES, typeall, typeall_8x8, typeall_9x9
from nardini.utils import parallelize
from nardini.score_and_plot import calculate_zscore_and_plot


DEFAULT_RANDOM_SEED = None


# -------------------------------------------------------------------------------------------------
# Script-specific utilities


def shutdown(signal_number, frame):
    """A utility function to handle `Ctrl-C` via the command-line."""
    print('Shut down requested. Terminating process.')
    sys.exit(0)


def shutdown_not_suspend(signal_number, frame):
    """A helper function to handle `Ctrl-Z` via the command-line."""
    print('Suspend not supported. Shutting down instead. Terminating process.')
    sys.exit(0)


# -------------------------------------------------------------------------------------------------


def validate_sequences(sequence_or_filename, default_name='fasta'):
    sequences = list()
    if sequence_or_filename is None:
        raise RuntimeError('This parameter cannot be `None`. Exiting.')

    if type(sequence_or_filename) is not str:
        raise RuntimeError('This parameter can only be a string (sequence or filename). Exiting.')

    if os.path.exists(sequence_or_filename):
        with open(sequence_or_filename, 'r') as seqfile:
            sequences = list(SeqIO.parse(seqfile, 'fasta'))
    else:
        # This means that we have to create a fake record using the sequence content.
        seq = sequence_or_filename[:]
        fasta = f'>{default_name}-1\n{seq}'
        fake_record = SeqIO.read(StringIO(fasta), 'fasta')
        sequences.append(fake_record)

    print('Number of sequences read: {num}'.format(num=len(sequences)), end='\n\n')
    return sequences


def set_random_seed(random_seed):
    if random_seed == DEFAULT_RANDOM_SEED:
        random_seed = int(datetime.now().timestamp())
        print(f'No random seed specified. Using generated random seed: {random_seed}\n')
    else:
        print(f'Using user-supplied random seed: {random_seed}\n')
    return random_seed


# -------------------------------------------------------------------------------------------------


def main():
    parser = ArgumentParser(formatter_class=ArgumentDefaultsHelpFormatter)
    parser.add_argument('sequences',
                        help='The sequence, or filename containing FASTA sequences to be analyzed.',
                        type=str,
                        default=None)

    parser.add_argument('-s', '--random-seed',
                        help='The random seed to use for generating the random distribution.',
                        type=int,
                        default=DEFAULT_RANDOM_SEED)

    parser.add_argument('-n', '--num-scrambled-sequences',
                        help='The number of sequences to generate while bootstrapping.',
                        type=int,
                        default=NUM_SCRAMBLED_SEQUENCES)
    
    parser.add_argument('-t', '--num-amino-acid-types',
                        help='The number of amino acid type groupings.',
                        type=int,
                        default=len(typeall))

    args = parser.parse_args()
    random_seed = set_random_seed(args.random_seed)
    
    amino_acid_groupings = typeall
    if args.num_amino_acid_types <= 0:
        raise RuntimeError('Error: the number of amino acid types cannot be less than or equal to 0.')
    elif args.num_amino_acid_types > len(typeall_9x9):
        raise RuntimeError(f'Error: the number of amino acid types cannot be more than {len(typeall_9x9)}.')
    elif args.num_amino_acid_types == len(typeall_9x9):
        amino_acid_groupings = typeall_9x9

    seq_records = validate_sequences(args.sequences)
    calculate_zscore_and_plot(seq_records, amino_acid_groupings, args.num_scrambled_sequences, random_seed)



if __name__ == '__main__':
    # Register the signals that will be handled by this script.
    signal.signal(signal.SIGTSTP,   shutdown_not_suspend)   # Ctrl-Z
    signal.signal(signal.SIGINT,    shutdown)               # Ctrl-C

    # Run as normal otherwise.
    main()
